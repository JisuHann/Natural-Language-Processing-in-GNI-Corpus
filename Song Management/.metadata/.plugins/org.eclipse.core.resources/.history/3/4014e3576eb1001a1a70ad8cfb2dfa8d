import javax.swing.JFrame;
import java.util.*;
import java.awt.*;import java.awt.event.*;
import javax.swing.*;
import java.sql.*;
import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

public class MusicExecute extends JFrame implements ActionListener{
	static Connection myConn;static String sql;
	static Statement myState;static ResultSet myResSet;
	int insert_check=0;SimpleDateFormat afterFormat = new SimpleDateFormat("yyyy-mm-dd");
	public static void main(String[] args){
		MusicExecute screen = new MusicExecute("Melon");
		System.out.println("STARTED");

		String userID = "root";
		String userPW = "root";
		String dbName = "final";
		String url = "jdbc:mysql://localhost:3306/" + dbName + "?&serverTimezone=UTC";
		
		myConn = null;myState = null;
		myResSet = null;sql = "";

		try {
			
			myConn = DriverManager.getConnection(url, userID, userPW);
			System.out.println("... Connected to databse " + dbName + " in MySQL with " + myConn.toString() + " ...");
			
			myState = myConn.createStatement();
			initializetable();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			
		}
	}
	JPanel entire = new JPanel();
	static JPanel song = new JPanel();
	static JPanel artist = new JPanel();
	static JPanel album = new JPanel();
	static JPanel Project = new JPanel(); 
	JPanel insert = new JPanel();JButton set = new JButton("select Privilege"); int insert_stat = 0;
	JLabel ques_1 = new JLabel("select Privilege");JTextField ans_1 = new JTextField(15);
	JLabel ques_2 = new JLabel("");JTextField ans_2 = new JTextField(15);
	JLabel ques_3 = new JLabel("");JTextField ans_3 = new JTextField(15);
	JLabel ques_4 = new JLabel("");JTextField ans_4 = new JTextField(15);
	JTabbedPane jtp = new JTabbedPane();
	MenuBar menbar = new MenuBar();
	static JScrollPane song_scroll = new JScrollPane(song, ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,  
			   ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
	Menu men_add = new Menu("what"); Menu men_query = new Menu("Privilege"); 
	MenuItem add_1 = new MenuItem("Song"); MenuItem add_2 = new MenuItem("Artist"); MenuItem add_3 = new MenuItem("Album");
	Menu men_option = new Menu("Nested");MenuItem nest_1 = new MenuItem("in");MenuItem nest_2 = new MenuItem("not in");
	MenuItem query_1 = new MenuItem("Insert"); 
	MenuItem query_2 = new MenuItem("Update");MenuItem query_2_2 = new MenuItem("Update Using Transaction");
	MenuItem query_3 = new MenuItem("Delete");
	MenuItem query_4 = new MenuItem("Select");
	MenuItem query_5 = new MenuItem("select Nested"); 
	MenuItem query_6 = new MenuItem("Select with View");
	MenuItem query_7 = new MenuItem("Print All");
	Menu men_exit = new Menu("More..");
	MenuItem exit_1 = new MenuItem("Exit");
	Color back = new Color(80,215,209);int in = 0;
	
	public MusicExecute(String s) {
		super(s);
		setBackground(Color.white);
		setVisible(true);
		
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		this.setSize(new Dimension(screenSize));
		entire.setLayout(new GridLayout(2,2,10,5));this.setLayout(new BorderLayout());
		this.add(jtp);this.setBackground(Color.white);
		this.add(entire, BorderLayout.CENTER);song.setLayout(new BoxLayout(song,BoxLayout.Y_AXIS));
		entire.add(song);song.setBackground(back);
		album.setLayout(new BoxLayout(album, BoxLayout.Y_AXIS)); artist.setLayout(new BoxLayout(artist, BoxLayout.Y_AXIS));
		entire.add(artist);artist.setBackground(back);
		entire.add(album);album.setBackground(back);
		entire.add(Project);Project.setBackground(Color.white);Project.setLayout(new  BoxLayout(Project, BoxLayout.Y_AXIS));
		
		this.add(insert, BorderLayout.SOUTH);
		insert.setLayout(new FlowLayout());
		insert.add(ques_1);insert.add(ans_1);
		insert.add(ques_2);insert.add(ans_2);
		insert.add(ques_3);insert.add(ans_3);
		insert.add(ques_4);insert.add(ans_4);
		insert.add(set); set.setActionCommand("add"); set.addActionListener(this);
		
		setMenuBar(menbar);
		menbar.add(men_add);
		men_add.add(add_1);men_add.add(add_2);
		men_add.add(add_3);
		add_1.setActionCommand("song");add_1.addActionListener(new set_listener());
		add_2.setActionCommand("artist");add_2.addActionListener(new set_listener());
		add_3.setActionCommand("album");add_3.addActionListener(new set_listener());
		
		menbar.add(men_query);
		men_query.add(query_1);men_query.add(query_2);men_query.add(query_2_2);men_query.add(query_3);
		men_query.add(query_4);	men_query.add(query_5);men_query.add(query_6);men_query.add(query_7);
		query_1.setActionCommand("query_1");query_1.addActionListener(new set_listener());
		query_2.setActionCommand("query_2");query_2.addActionListener(new set_listener());
		query_2_2.setActionCommand("query_2_2");query_2_2.addActionListener(new set_listener());
		query_3.setActionCommand("query_3");query_3.addActionListener(new set_listener());
		query_4.setActionCommand("query_4");query_4.addActionListener(new set_listener());
		query_5.setActionCommand("query_5");query_5.addActionListener(new set_listener());
		query_6.setActionCommand("query_6");query_6.addActionListener(new set_listener());
		query_7.setActionCommand("query_7");query_7.addActionListener(new set_listener());
	
		
		menbar.add(men_option);
		men_option.add(nest_1);nest_1.setActionCommand("in");nest_1.addActionListener(new set_listener());
		men_option.add(nest_2);nest_2.setActionCommand("not in");nest_2.addActionListener(new set_listener());
		
		menbar.add(men_exit);
		men_exit.add(exit_1); exit_1.setActionCommand("exit");exit_1.addActionListener(new set_listener());
		
		
	}
	
	public Object getResultValue(int columnType, String columnName, ResultSet rs) throws SQLException {
		  if (columnType == Types.NUMERIC || columnType == Types.INTEGER || columnType == Types.BIGINT) {
		    return rs.getInt(columnName);

		  } else if (columnType == Types.DOUBLE || columnType == Types.FLOAT) {
		    return rs.getDouble(columnName);

		  } else if (columnType == Types.CHAR || columnType == Types.VARCHAR || columnType == Types.NVARCHAR) {
		    return rs.getString(columnName);

		  } else {
		    return rs.getString(columnName);
		  }
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Project.removeAll();
		String str_1 = ans_1.getText();	
		String str_2 = ans_2.getText();
		String str_3 = ans_3.getText();	
		String str_4 = ans_4.getText();
		Object source = e.getActionCommand();
		
		if(source.equals("add")) {
			
			if(set.getText()=="Insert") {
				System.out.println("4");
				PreparedStatement pStmt = null;
				try {
					if(insert_check==1) {
						pStmt = myConn.prepareStatement("Insert into Song values (?, ?, ?, ?)");
						pStmt.setString(1, str_1);pStmt.setString(2, str_2);pStmt.setString(3, str_3);
						Date d = Date.valueOf(str_4);pStmt.setDate(4, d);
					}
					if(insert_check==2) {
						pStmt = myConn.prepareStatement("Insert into Artist values (?, ?, ?)");
						pStmt.setString(1, str_1);pStmt.setString(2, str_2);pStmt.setInt(3, Integer.parseInt(str_3));
					}
					if(insert_check==3) {
						pStmt = myConn.prepareStatement("Insert into Album values (?, ?, ?)");
						pStmt.setString(1, str_1);
						String transDate = afterFormat.format(str_2);Date d = Date.valueOf(transDate);
						pStmt.setDate(2, d);pStmt.setInt(3, Integer.parseInt(str_3));
					}
					pStmt.executeUpdate();
				} catch (SQLException e1) {
					e1.printStackTrace();
					ques_1.setText(e1.toString());
				}
			}
			if(set.getText()=="Update") {
				System.out.println("5");
				PreparedStatement pStmt = null;
				String where = "";
				if(!str_3.isEmpty()) {
					where += str_3;
				}
				if(!str_4.isEmpty()) {
					where = where + " and "+str_4;
				}
				try {
					System.out.println("set "+str_1+"="+str_2+" where "+where);
					if(insert_check==1) {
						pStmt = myConn.prepareStatement("Update Song set "+str_1+"="+str_2+" where "+where);
					}
					if(insert_check==2) {
						pStmt = myConn.prepareStatement("Update Artist set "+str_1+"="+str_2+" where "+where);
					}
					if(insert_check==3) {
						pStmt = myConn.prepareStatement("Update Album set "+str_1+"="+str_2+" where "+where);
					}
					pStmt.executeUpdate();
					
				} catch (SQLException e1) {
					e1.printStackTrace();ques_1.setText(e1.toString());
				}
				initializetable();set.setText("Choose Privilege");
			}
			if(set.getText()=="Update with Transaction") {
				System.out.println("6");
				PreparedStatement pStmt = null;
				String where = "";
				if(!str_3.isEmpty()) {
					where += str_3;
				}
				if(!str_4.isEmpty()) {
					where = where + " and "+str_4;
				}
				try {
					if(insert_check==1) {
						sql = "Update Song set "+str_1+"="+str_2+" where "+where;
					}
					if(insert_check==2) {
						sql = "Update Artist set "+str_1+"="+str_2+" where "+where;
					}
					if(insert_check==3) {
						sql = "Update Album set "+str_1+"="+str_2+" where "+where;
					}
					myConn.setAutoCommit(false);
					JLabel com_1 = new JLabel("Set Auto Commit false");Project.add(com_1);
					pStmt = myConn.prepareStatement(sql);
					JLabel com_2 = new JLabel("Set PreparedStatement");Project.add(com_2);
					pStmt.executeUpdate();
					JLabel com_3 = new JLabel("Set Execute Update");Project.add(com_3);
					myConn.commit();
					System.out.println("1");
					JLabel com_4 = new JLabel("Transaction Commit");Project.add(com_4);
					myConn.setAutoCommit(true);
					JLabel com_5 = new JLabel("Set Auto Commit True");Project.add(com_5);
					ques_1.setText("Transaction-Update Completed");
				} catch (SQLException e1) {
					e1.printStackTrace();
					if(myConn!=null) try{myConn.rollback();}catch(SQLException sqle){}  
				}
				initializetable();set.setText("Choose Privilege");
			}
			if(set.getText()=="Delete") {
				System.out.println("7");
				PreparedStatement pStmt = null;String where = null;
				if(!str_1.isEmpty()) {
					where =" where "+ str_1;
				}
				if (!str_2.isEmpty()) {
					where = where + " and "+str_2;
				}
				if (!str_3.isEmpty()) {
					where = where + " and "+str_3;
				}
				if (!str_4.isEmpty()) {
					where = where + " and "+str_4;
				}
				System.out.println(where);System.out.println(str_1);
				try {
					if(insert_check==1) {
						pStmt = myConn.prepareStatement("Delete from Song"+where);
					}
					if(insert_check==2) {
						pStmt = myConn.prepareStatement("Delete from Artist"+where);
					}
					if(insert_check==3) {
						pStmt = myConn.prepareStatement("Delete from Album"+where);
					}
					pStmt.executeUpdate();
				} catch (SQLException e1) {
					e1.printStackTrace();
					ques_1.setText("Try Again!"); 											//ques_1말고 다른 곳에 저장하도록 만들기 다른 조건도 동일하게 적용
				}
				initializetable();set.setText("Choose Privilege");
			}
			if(set.getText()=="select Nested") {
				System.out.println("8");
				PreparedStatement pStmt;ResultSet rs;
				sql = "select * from "+str_1+" natural join "+str_2+" where "+str_3;
				if(in==0)sql+=" in "+str_4;
				if(in==1)sql+=" not in "+str_4;
				try {
					System.out.println(sql);
					pStmt = myConn.prepareStatement(sql);
					rs = pStmt.executeQuery();
					ResultSetMetaData rsmd = rs.getMetaData();
					int columnCnt = rsmd.getColumnCount();
					
					String up ="";
					
					ArrayList<Map> columnList = new ArrayList<>();
					for (int i = 1; i <= columnCnt; i++) {
					    Map<String, Object> map = new HashMap<>();
					    map.put("name", rsmd.getColumnName(i));
					    map.put("type", rsmd.getColumnType(i));
					    columnList.add(map);
					    up = up+String.format("%15s %10s %15s","",rsmd.getColumnName(i),""); 
					}
					JLabel tit = new JLabel(up);Project.add(tit);
					JLabel tit2 = new JLabel(String.format("%200s", "").replace(' ', '-'));Project.add(tit2);
					System.out.println("3");
					while(rs.next()) {
						String result = "";
						for(int i=0;i<columnCnt;i++) {
							Map columnInfo = columnList.get(i);
						    String columnName = (String) columnInfo.get("name");
						    int columnType = (int) columnInfo.get("type");
 					        Object obj = getResultValue(columnType, columnName, rs);
 					        result = result+String.format("%10s %20s %10s","",obj.toString(),"");
 					        
						}
						JLabel result_lab = new JLabel(result);
						Project.add(result_lab);
					}
					ques_1.setText("Select Completed");
				} catch (SQLException e1) {
					e1.printStackTrace();
					ques_1.setText("You have an error in your SQL syntax");
				}
				initializetable();set.setText("Choose Privilege");
			}
			
			if(set.getText()=="Select"  || set.getText()==("Select with View")) {
				System.out.println("9");
				PreparedStatement pStmt;ResultSet rs;
				sql = "select "+ str_1 + " from "+ str_2;
				if(!str_3.isEmpty()) {
					sql = sql +" where "+ str_3;
				}
				if (!str_4.isEmpty()) {
					sql = sql + " and "+str_4;
				}
				try {
					System.out.println(sql);
					pStmt = myConn.prepareStatement(sql);
					rs = pStmt.executeQuery();
					ResultSetMetaData rsmd = rs.getMetaData();
					int columnCnt = rsmd.getColumnCount();
					
					String up ="";
					
					ArrayList<Map> columnList = new ArrayList<>();
					for (int i = 1; i <= columnCnt; i++) {
					    Map<String, Object> map = new HashMap<>();
					    map.put("name", rsmd.getColumnName(i));
					    map.put("type", rsmd.getColumnType(i));
					    columnList.add(map);
					    up = up+String.format("%15s %10s %15s","",rsmd.getColumnName(i),""); 
					}
					JLabel tit = new JLabel(up);Project.add(tit);
					JLabel tit2 = new JLabel(String.format("%200s", "").replace(' ', '-'));Project.add(tit2);
					System.out.println("3");
					while(rs.next()) {
						String result = "";
						for(int i=0;i<columnCnt;i++) {
							Map columnInfo = columnList.get(i);
						    String columnName = (String) columnInfo.get("name");
						    int columnType = (int) columnInfo.get("type");
 					        Object obj = getResultValue(columnType, columnName, rs);
 					        result = result+String.format("%10s %20s %10s","",obj.toString(),"");
 					        
						}
						JLabel result_lab = new JLabel(result);
						Project.add(result_lab);
					}
					ques_1.setText("Select Completed");
				} catch (SQLException e1) {
					e1.printStackTrace();
					ques_1.setText("You have an error in your SQL syntax");
				}
				initializetable();set.setText("Choose Privilege");
		}
			
	}
		
	}
	
	class set_listener implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			// TODO Auto-generated method stub

			Object source = e.getActionCommand();
			if(source.equals("song")) {
				System.out.println("1");
				insert_check=1;
			}
			else if(source.equals("artist")) {
				System.out.println("2");
				insert_check=2;
			}
			else if(source.equals("album")) {
				System.out.println("3");
				insert_check=3;
			}
			else if(source.equals("query_1")) {
				System.out.println("10 ");
				if(insert_check == 0) {
					ques_1.setText("Check Table from MenuBar");	
				}
				if(insert_check==1) {
					set.setText("Insert");
					ques_1.setText("Artist name: ");
					ques_2.setText("Song name: ");
					ques_3.setText("Album name: ");
					ques_4.setText("Release Date: ");	
				}
				if(insert_check==2) {
					set.setText("Insert");
					ques_1.setText("Artist name: ");
					ques_2.setText("Agency name: ");
					ques_3.setText("Debut year: ");
					ques_4.setText("Additional: ");	
				}
				if(insert_check==3) {
					set.setText("Insert");
					ques_1.setText("Album Title: ");
					ques_2.setText("Release Date: ");
					ques_3.setText("Likes: ");
					ques_4.setText("Additional: ");	
				}
				
				}
			else if(source.equals("query_2")) {
				System.out.println("11 ");
				set.setText("Update");
				if(insert_check==1) {
					ques_1.setText("Update Song set");
				}
				if(insert_check==2) {
					ques_1.setText("Update Artist set");
				}
				if(insert_check==3) {
					ques_1.setText("Update Album set");
				}
				
				ques_2.setText("to");
				ques_3.setText("where condition 1:");
				ques_4.setText("where condition 2:");
			}
			else if(source.equals("query_2_2")){
				System.out.println("12 ");
				set.setText("Update with Transaction");
				ques_1.setText("set");
				ques_2.setText("to");
				ques_3.setText("where condition 1:");
				ques_4.setText("where condition 2:");
			}
			else if(source.equals("query_3")) {
				System.out.println("13");
				set.setText("Delete");
				ques_1.setText("delete condition 1:");
				ques_2.setText("delete condition 2:");
				ques_3.setText("delete condition 3:");
				ques_4.setText("delete condition 4:");
			}
			else if(source.equals("query_4")) {
				System.out.println("14");
				set.setText("Select");
				ques_1.setText("Project Column");
				ques_2.setText("from");
				ques_3.setText("where condition 1:");
				ques_4.setText("where condition 2:");
			}
			else if(source.equals("in")) {
				System.out.println("15");
				in=1;
			}
			else if(source.equals("not in")) {
				System.out.println("16");
				in=0;
			}	
			else if(source.equals("query_5")) {
				System.out.println("17");
				set.setText("select Nested"); //하나를 select *시키기
				ques_1.setText("Table 1");
				ques_2.setText("Table 2");
				ques_3.setText("where ");
				if(in==0)
					ques_4.setText("in");
				if(in==1)
					ques_4.setText("not in");
			}
			else if(source.equals("query_7")) {//printout all
				System.out.println("19");
				initializetable();Project.removeAll();
			}else if(source.equals("query_6")) {
				System.out.println("18");
				Project.removeAll();
				set.setText("Select with View");
				ques_1.setText("Project Column");
				ques_2.setText("from");
				ques_3.setText("where condition 1:");
				ques_4.setText("where condition 2:");
				PreparedStatement pStmt;ResultSet rs;
				try {
					pStmt = myConn.prepareStatement("select * from song_album");
					rs = pStmt.executeQuery();
					ResultSetMetaData rsmd = rs.getMetaData();
					int columnCnt = rsmd.getColumnCount();
					
					String up ="";
					
					ArrayList<Map> columnList = new ArrayList<>();
					for (int i = 1; i <= columnCnt; i++) {
					    Map<String, Object> map = new HashMap<>();
					    map.put("name", rsmd.getColumnName(i));
					    map.put("type", rsmd.getColumnType(i));
					    columnList.add(map);
					    up = up+String.format("%15s %10s %15s","",rsmd.getColumnName(i),""); 
					}
					JLabel tit = new JLabel(up);Project.add(tit);
					JLabel tit2 = new JLabel(String.format("%200s", "").replace(' ', '-'));Project.add(tit2);
					System.out.println("3");
					while(rs.next()) {
						String result = "";
						for(int i=0;i<columnCnt;i++) {
							Map columnInfo = columnList.get(i);
						    String columnName = (String) columnInfo.get("name");
						    int columnType = (int) columnInfo.get("type");
						        Object obj = getResultValue(columnType, columnName, rs);
						        result = result+String.format("%10s %20s %10s","",obj.toString(),"");
						        
						}
						JLabel result_lab = new JLabel(result);
						Project.add(result_lab);
					}
				} catch (SQLException e1) {
					e1.printStackTrace();
					ques_1.setText("You have an error in your SQL syntax");
				}
			}
			
			else if(source.equals("exit")) {
				if (myResSet != null) {
					try {
						myResSet.close();
						System.out.println("... Close ResultSet ...");
					} catch (SQLException e2) {
						e2.printStackTrace();
					}
				}
				
				if (myState != null) {
					try {
						myState.close();
						System.out.println("... Close Statement ...");
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
				}
				
				if (myConn != null) {
					try {
						myConn.close();
						System.out.println("... Close Connection " + myConn.toString() + " ...");
					} catch (SQLException aw) {
						aw.printStackTrace();
					}
				}
			}
		}}
	
	public static void initializetable() {

		song.removeAll();artist.removeAll();album.removeAll();
		try {
		sql = "SELECT * FROM Song";
		myResSet = myState.executeQuery(sql);
		
		String s_artist_name = "";
		String name = "";
		String album_str = "";
		Date release_date;
		int launched = -1;
		
		JLabel lab1 = new JLabel(String.format("%15s Artist %30s Name %30s  Album %30s  Release Date %6s","", "", "","", ""));
		JLabel lab2 = new JLabel(String.format("%200s", "").replace(' ', '-'));
		song.add(lab1);song.add(lab2);
		
		while (myResSet.next()) {
			
			s_artist_name = myResSet.getString("artist_name");
			name = myResSet.getString("name");
			album_str = myResSet.getString("album");
			release_date = myResSet.getDate("release_date");
			JLabel lab1_1 = new JLabel(String.format(" %30s %30s %30s %10s %20s", s_artist_name, name, album_str,"",release_date.toString()));
			song.add(lab1_1);
		}
		
		sql = "SELECT * FROM Artist";
		myResSet = myState.executeQuery(sql);
		
		String artist_name = "";
		String agency = "";
		Integer debut_year;
		
		lab1 = new JLabel(String.format("%15s name %30s agency %30s debut_year ", "","", ""));
		lab2 = new JLabel(String.format("%200s", "").replace(' ', '-'));
		artist.add(lab1);artist.add(lab2);
		
		while (myResSet.next()) {
			
			name = myResSet.getString("artist_name");
			agency = myResSet.getString("agency");
			debut_year = myResSet.getInt("debut_year");
			JLabel lab = new JLabel(String.format(" %40s %30s %20s %4d   ", name, agency,"", debut_year));
			artist.add(lab);
		}
		
		sql = "SELECT * FROM Album";
		myResSet = myState.executeQuery(sql);
		
		String Title = "";
		int Likes = -1;
		
		lab1 = new JLabel(String.format("%15s Title  %30s release_date  %30s Likes ","", "",""));
		lab2 = new JLabel(String.format("%200s", "").replace(' ', '-'));
		album.add(lab1);album.add(lab2);
		
		while (myResSet.next()) {
			
			Title = myResSet.getString("Title");
			release_date = myResSet.getDate("release_date");
			Likes = myResSet.getInt("Likes");
			JLabel lab = new JLabel(String.format(" %30s  %30s  %20s %8d", Title, release_date.toString(),"", Likes));
			album.add(lab);
		}
	} catch (SQLException e) {
		e.printStackTrace();
	} finally {
	}
		
		}
	
	}


